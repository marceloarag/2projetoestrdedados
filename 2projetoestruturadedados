package ed.listaligada;

public class Celula {
	
	private Object elemento;
	private Celula proximo;
	public Celula(Object elemento, Celula proximo) {
		super();
		this.elemento = elemento;
		this.proximo = proximo;
	}
	public Celula getProximo() {
		return proximo;
	}
	public void setProximo(Celula proximo) {
		this.proximo = proximo;
	}
	public Object getElemento() {
		return elemento;
	}
	

}













package ed.listaligada;

public class ListaLigada {
	
	private Celula primeira = null;
	private int totalDeElementos = 0;
	private Celula ultima = null;
	
	public void adicionaNoComeco(Object elemento) {
		
		Celula nova = new Celula(elemento, primeira);
		this.primeira = nova;
		
		
		if(this.totalDeElementos == 0) {
			
			this.ultima = this.primeira;
		}
		
		
		
		this.totalDeElementos++;  
		
		
	}
	
	@Override
	public String toString() {
		
		if(this.totalDeElementos == 0) {
			return "[]";
		}
		
		Celula atual = primeira;
		
		StringBuilder builder = new StringBuilder("[");
		 
		for(int i =0; i <totalDeElementos; i++) {
			
			builder.append(atual.getElemento());
			builder.append(",");
			
			atual = atual.getProximo();
			
			
		}
		
		
		builder.append("]");
		
		return builder.toString();
		
	}
	
	
	
	public void adiciona(Object elemento) {
		
		if(this.totalDeElementos == 0) {
			adicionaNoComeco(elemento);
		} else {
		Celula nova = new Celula(elemento, null);
		this.ultima.setProximo(nova);
		this.ultima = nova;
		this.totalDeElementos++;
		
		}
		
		
		
	}

		

		private boolean posicao0cupada(int posicao) {
			  
			return posicao >= 0 && posicao < this.totalDeElementos;
		}
	  
	private Celula pegaCelula(int posicao) {
		if(!posicao0cupada(posicao)) {
		throw new IllegalArgumentException("posicao inexistente");
		
		
	}
		Celula atual = primeira;
		
		for(int i = 0; i < posicao; i++) {
			
			atual = atual.getProximo(); 
			
		}
		
		return atual;
		
	}
	
public void adiciona(int posicao, Object elemento) {
		
		
		
		if(posicao == 0) {
			
			
			adicionaNoComeco(elemento);
			
			
		} else if (posicao == this.totalDeElementos) {
			
			adiciona(elemento);
			
		} else {
		
		
		Celula anterior = this.pegaCelula(posicao - 1);
		Celula nova = new Celula(elemento, anterior.getProximo());
		anterior.setProximo(nova);
		this.totalDeElementos++; 
	}
		
		
	}
	
public Object pega(int posicao) {
	
	return this.pegaCelula(posicao).getElemento();

}



public void removeDoComeco() {
	
	if(this.totalDeElementos==0) {
		
		throw new IllegalArgumentException("lista vazia");
	}
	
	this.primeira = this.primeira.getProximo();
	this.totalDeElementos--;
	
	if(this.totalDeElementos == 0) {
		this.ultima = null;
		
	}
	
}


public int tamanho() { 
	return this.totalDeElementos;
	
	
	
}


public boolean contem(Object o) { return false; }


}
	
	
	











package ed.listaligada;

public class TestaListaLigada {
	
	public static void main(String[] args) {
		ListaLigada lista = new ListaLigada();
		
		System.out.println(lista);
		lista.adicionaNoComeco("mauricio");
		System.out.println(lista);
		lista.adicionaNoComeco("paulo");
		System.out.println(lista);
		lista.adicionaNoComeco("guilherme");
		System.out.println(lista);
		
		
		lista.adiciona("Marcelo");
		System.out.println(lista);
		
		lista.adiciona(2, "Gabriel");
		System.out.println("lista");
		
		Object x = lista.pega(2);
		System.out.println(x);
		
		System.out.println(lista.tamanho());
		
		lista.removeDoComeco();
		
		System.out.println(lista);
		System.out.println(lista.tamanho());
	}

}
